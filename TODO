https://stackoverflow.com/questions/43592016/how-do-i-replace-while-loops-with-a-functional-programming-alternative-without-t
// generate dump files
// pasar los argumentos
// conectar client
// actualizar
// crear
// exponer funciones para uso de bases de datos

var argumentosEstudiantes = {
  anio: '2017', // 2017
  termino: '2s', // [1s,2s]
  codigomateria: 'FISG1002', // [FISG1002, FISG1003]
  paralelo: '1', // [1,2,3 ....]
}

// var argumentosProfesores = {
//   anio: ANIO, // 2017
//   termino: TERMINO, // [1s,2s]
//   codigomateria: '', // [FISG1002, FISG1003]
//   paralelo: '', // [1,2,3 ....]
//   tipo: '' // [0,1] 0 profesor titular, 1 profesor peer
// }


// wsPPL.obtenerEstudiantes({ argumentos: argumentosEstudiantes, metodo: metodoEstudiantes })
//   .then(wsPPL.generarJsonEstudiante)
//   .then((resp) => {
//     console.log (resp)
//   })

// describe('PPL WES SERVICE', () =>  {
//   it('@t1 OBTENER RAW', (done) => {
//     done()
//     // wsPPL.obtenerRaw({ argumentos: argumentosEstudiantes, metodo: metodoEstudiantes }).then((resp) => {
//     //   console.log(resp)
//     // })
//   })
// })


// wsPPL.obtenerRaw({ argumentos: argumentosProfesores, metodo: metodoProfesores }).then((raw) => {
//   wsPPL.generarJsonEstudiante({ raw: raw.toString() }).then((resp) => {
//     if (resp.length !== 0) {
//       let valido = wsPPL.saveFile({ tipo: 'profesor', argumentos: argumentosProfesores, raw })
//       console.log(valido)
//     }
//   })
// })

// console.log(estudiantesDump.toString())


wsPPL.generarJsonEstudiantesTodos({ anio: '2017',termino: '2s' }).then((res) => {
  console.log(res)
  // jsonfile.writeFile(`${dumpFolder}/profesores_2017_2s.json`, res, function (err) {
  // 	console.error(err)
  // })
})

  // crear interface base de datos: que parametros envio, que espero recibir. Errors de esto
  // crear paralelo
  // crear estudiante
  // crear profesor
  // buscar estudiante
  // buscar profesor
  // buscar paralelo
  // anadir estudiante a paralelo
  // anadir profesor a paralelo
  // buscar estudiante en paralelo
  // buscar profesor en paralelo

    it('@t5 PARALELOS JSON', (done) => {
    let estudiantes = wsPPL.generarJsonEstudiante({ raw: estudiantesDump })
    done()
  }),
  it('@t6 ESTUDIANTES JSON', (done) => {
    let estudiantes = wsPPL.generarJsonEstudiante({ raw: estudiantesDump })
    done()
  }),
  it('@t7 PROFESORES JSON', (done) => {
    let estudiantes = wsPPL.generarJsonEstudiante({ raw: estudiantesDump })
    done()
  })
  describe('@t8 DATABASE', () =>  {
    it('@t8.1 CREAR PARALELOS', (done) => {
      done()
    }),
    it('@t8.2 CREAR ESTUDIANTES Y ANADIR A _____', (done) => {
      done()
    }),
    it('@t8.3 CREAR PROFESORES  Y ANADIR A _____', (done) => {
      done()
    })
  })
  // const Datastore = require('nedb')
  // let Estudiantes = new Datastore({ filename: path.join(__dirname, 'dump/estudiantes.db'), autoload: true })
  // let Profesores = new Datastore({ filename: path.join(__dirname, 'dump/profesores.db'), autoload: true })
  // let Paralelos = new Datastore({ filename: path.join(__dirname, 'dump/paralelos.db'), autoload: true })
  // const db = {
  //   Estudiantes,
  //   Profesores,
  //   Paralelos
  // }

  // db.Estudiantes.loadDatabase()
  // db.Profesores.loadDatabase()
  // db.Paralelos.loadDatabase()



para creacion de objeto se tendria en cuenta:

pasar un json
{
  anio: //opcional
  termino: // opcional,
  cron: { // opcional
    inicio
    fin
    horaCorrer
    intervalo
  }
  db: { // todos son promises y oblitorios, documentar que recibe y que tiene que devolver
    obtenerEstudiantesDB //
    obtenerProfesoresDB //
    crearEstudiante
    crearProfesor
    crearParalelo
    anadirEstudiantAParalelo
    anadirProfesorAParalelo
    eliminarEstudiante
    cambiarEstudianteParalelo
  },
  profesoresJson: // profesor que se quieren anadir y que pueden estar tambie en la base de datos, documentar formato
}
